{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","App","handleError","response","ok","Error","status","json","e","setState","searchField","target","value","state","fetch","then","this","users","catch","console","log","filteredMonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6VAEe,SAASA,EAAKC,GAC3B,OACE,yBAAKC,UAAU,kBACb,yBACEC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BACHC,IAAI,YAEN,gCAAML,EAAMG,QAAQG,KAApB,KACA,2BAAIN,EAAMG,QAAQI,Q,MCJT,SAASC,EAASR,GAC/B,OACE,yBAAKC,UAAU,aACZD,EAAMS,SAASC,KAAI,SAAAP,GAAO,OACzB,kBAACJ,EAAD,CAAMY,IAAKR,EAAQC,GAAID,QAASA,Q,UCN3BS,EAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACvC,OACE,2BACEC,KAAK,SACLd,UAAU,SACVY,YAAaA,EACbG,SAAUF,KCuCDG,G,kBA1Cb,WAAYjB,GAAQ,IAAD,8BACjB,4CAAMA,KAMRkB,YAAc,SAAAC,GACZ,IAAKA,EAASC,GACZ,MAAMC,MAAMF,EAASG,QAEvB,OAAOH,EAASI,QAXC,EAanBT,aAAe,SAAAU,GACb,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAZtC,EAAKC,MAAQ,CACXpB,SAAU,GACViB,YAAa,IAJE,E,iFAiBE,IAAD,OAClBI,MAAM,8CACHC,KAAKC,KAAKd,aACVa,MAAK,SAAAE,GAAK,OAAI,EAAKR,SAAS,CAAEhB,SAAUwB,OACxCC,MAAMC,QAAQC,O,+BAGT,IAAD,EAC2BJ,KAAKH,MAA/BpB,EADD,EACCA,SAAUiB,EADX,EACWA,YACZW,EAAmB5B,EAAS6B,QAAO,SAAAnC,GAAO,OAC9CA,EAAQG,KAAKiC,cAAcC,SAASd,EAAYa,kBAElD,OACE,yBAAKtC,UAAU,OACb,+CACA,kBAAC,EAAD,CACEY,YAAY,iBACZC,aAAckB,KAAKlB,eAErB,kBAACN,EAAD,CAAUC,SAAU4B,S,GArCVI,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,kB","file":"static/js/main.2b196c1f.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./card.styles.css\";\nexport default function Card(props) {\n  return (\n    <div className='card-container'>\n      <img\n        src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\n        alt='monster'\n      />\n      <h2> {props.monster.name} </h2>\n      <p>{props.monster.email}</p>\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport Card from \"../card/card.component\";\n\nimport \"./card-list.styles.css\";\n\nexport default function CardList(props) {\n  return (\n    <div className='card-list'>\n      {props.monsters.map(monster => (\n        <Card key={monster.id} monster={monster} />\n      ))}\n    </div>\n  );\n}\n","import React from \"react\";\n\nimport \"./search-box.styles.css\";\n\nexport const SearchBox = ({ placeholder, handleChange }) => {\n  return (\n    <input\n      type='search'\n      className='search'\n      placeholder={placeholder}\n      onChange={handleChange}\n    />\n  );\n};\n","import React, { Component } from \"react\";\n\nimport CardList from \"./components/card-list/card-list.component\";\nimport { SearchBox } from \"./components/search-box/search-box.component\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      monsters: [],\n      searchField: \"\"\n    };\n  }\n  handleError = response => {\n    if (!response.ok) {\n      throw Error(response.status);\n    }\n    return response.json();\n  };\n  handleChange = e => {\n    this.setState({ searchField: e.target.value });\n  };\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(this.handleError)\n      .then(users => this.setState({ monsters: users }))\n      .catch(console.log);\n  }\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      <div className='App'>\n        <h1>Monster Rolodex</h1>\n        <SearchBox\n          placeholder='Search Monster'\n          handleChange={this.handleChange}\n        ></SearchBox>\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}